{
  "task_type": "backend-api",
  "description": "Backend API implementation tasks using Node.js, Python, Go, or other backend frameworks",
  "version": "1.0.0",
  "required_deliverables": [
    {
      "id": "source_files",
      "type": "file",
      "description": "Backend source files must exist",
      "pattern": "**/*.{ts,js,py,go}",
      "min_count": 1,
      "verification_command": "find . -name '*.ts' -o -name '*.js' -o -name '*.py' -o -name '*.go' -type f",
      "failure_message": "No backend source files found"
    },
    {
      "id": "api_endpoint_list",
      "type": "documentation",
      "description": "List of implemented API endpoints with methods and paths",
      "location": ".orchestration/evidence/api-endpoints.md",
      "required": true,
      "verification_command": "ls .orchestration/evidence/api-endpoints.md",
      "failure_message": "API endpoint documentation missing"
    },
    {
      "id": "build_success",
      "type": "build",
      "description": "Build/compile must succeed (npm build, go build, etc.)",
      "command": "npm run build || go build || python -m py_compile *.py",
      "expected_exit_code": 0,
      "verification_command": "npm run build",
      "failure_message": "Build failed - code does not compile"
    },
    {
      "id": "api_tests",
      "type": "test_output",
      "description": "API tests must pass (unit + integration)",
      "command": "npm test || go test ./... || pytest",
      "expected_exit_code": 0,
      "required_pattern": "(Tests|All tests).*passed|PASS|✓",
      "verification_command": "npm test",
      "failure_message": "API tests failed or were not run"
    },
    {
      "id": "curl_verification",
      "type": "api_behavioral_test",
      "description": "API endpoints respond correctly (curl or HTTP client)",
      "tool": "curl or Behavioral Oracle script",
      "required": true,
      "examples": [
        "curl -X GET http://localhost:3000/api/health → 200 OK",
        "curl -X POST http://localhost:3000/api/login -d {...} → 200 + JWT token"
      ],
      "verification_command": "bash .orchestration/oracles/api-health-check.sh",
      "failure_message": "API endpoints not responding or behavioral tests not run"
    },
    {
      "id": "security_scan",
      "type": "security",
      "description": "Security vulnerability scan (npm audit, Snyk, or equivalent)",
      "command": "npm audit --audit-level=high || safety check || go list -json -m all | nancy sleuth",
      "max_critical": 0,
      "max_high": 0,
      "verification_command": "npm audit",
      "failure_message": "Critical or high security vulnerabilities detected"
    },
    {
      "id": "database_migrations",
      "type": "database",
      "description": "Database migrations run successfully (if applicable)",
      "command": "npm run migrate || alembic upgrade head || rake db:migrate",
      "expected_exit_code": 0,
      "verification_command": "ls migrations/ || ls alembic/versions/",
      "failure_message": "Database migrations missing or failed",
      "optional": true,
      "applies_if": "database_required"
    },
    {
      "id": "performance_benchmark",
      "type": "performance",
      "description": "API latency benchmarks (p95 < 200ms for standard endpoints)",
      "tool": "autocannon, wrk, or load testing tool",
      "thresholds": {
        "p95_latency_ms": 200,
        "throughput_rps": 100
      },
      "verification_command": "cat .orchestration/evidence/performance-benchmark.json",
      "failure_message": "Performance benchmarks not run or thresholds not met",
      "optional": false
    }
  ],
  "verification_script": ".orchestration/oracles/backend-api-verify.sh",
  "quality_gate_threshold": 100,
  "notes": [
    "ALL deliverables (except optional ones) are REQUIRED for backend-api tasks",
    "curl verification can be manual until Behavioral Oracles implemented (Stage 2 Week 4)",
    "Performance benchmarks REQUIRED - no production APIs without latency validation",
    "Security scans MANDATORY - zero tolerance for critical/high vulnerabilities"
  ]
}
