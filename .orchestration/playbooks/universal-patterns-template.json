{
  "playbook_version": "1.0.0",
  "project_type": "universal",
  "last_updated": "2025-10-24T00:00:00Z",
  "patterns": [
    {
      "id": "universal-pattern-001",
      "type": "helpful",
      "marker": "✓",
      "title": "Requirement-Analyst First for Complex Projects",
      "helpful_count": 0,
      "harmful_count": 0,
      "context": "User requests with ambiguous scope or unclear requirements",
      "strategy": "ALWAYS dispatch requirement-analyst before implementation specialists",
      "evidence": "Prevents scope drift, clarifies acceptance criteria, reduces rework (template)",
      "learned_from": [],
      "created_at": "2025-10-24T00:00:00Z"
    },
    {
      "id": "universal-pattern-002",
      "type": "helpful",
      "marker": "✓",
      "title": "Verification-Agent Before Quality-Validator",
      "helpful_count": 0,
      "harmful_count": 0,
      "context": "All projects requiring quality gates",
      "strategy": "Dispatch verification-agent to verify claims, then quality-validator for final gate",
      "evidence": "Verification finds false completions, quality-validator ensures production readiness (template)",
      "learned_from": [],
      "created_at": "2025-10-24T00:00:00Z"
    },
    {
      "id": "universal-pattern-003",
      "type": "helpful",
      "marker": "✓",
      "title": "Parallel Dispatch for Independent Tasks",
      "helpful_count": 0,
      "harmful_count": 0,
      "context": "Multiple tasks with no dependencies (UI + API, iOS + Android)",
      "strategy": "Dispatch specialists in parallel using single message with multiple Task calls",
      "evidence": "40-50% faster than serial dispatch, reduces total orchestration time (template)",
      "learned_from": [],
      "created_at": "2025-10-24T00:00:00Z"
    },
    {
      "id": "universal-pattern-004",
      "type": "helpful",
      "marker": "✓",
      "title": "Design-Reviewer MANDATORY for Production UIs",
      "helpful_count": 0,
      "harmful_count": 0,
      "context": "All user-facing applications (web, mobile, desktop)",
      "strategy": "ALWAYS include design-reviewer in team composition for production releases",
      "evidence": "Catches visual bugs, spacing issues, accessibility violations before users see them (template)",
      "learned_from": [],
      "created_at": "2025-10-24T00:00:00Z"
    },
    {
      "id": "universal-pattern-005",
      "type": "helpful",
      "marker": "✓",
      "title": "System-Architect for Multi-System Projects",
      "helpful_count": 0,
      "harmful_count": 0,
      "context": "Projects spanning frontend + backend + mobile",
      "strategy": "Dispatch system-architect to design complete architecture before implementation",
      "evidence": "Prevents integration issues, ensures consistent API contracts, identifies bottlenecks early (template)",
      "learned_from": [],
      "created_at": "2025-10-24T00:00:00Z"
    },
    {
      "id": "universal-pattern-006",
      "type": "helpful",
      "marker": "✓",
      "title": "Work Orders Reduce Context Hunting",
      "helpful_count": 0,
      "harmful_count": 0,
      "context": "Large projects with complex architectural context",
      "strategy": "Create .orchestration/work-orders/[task-id].md with full context before dispatching specialists",
      "evidence": "Specialists waste 30-40% less tokens searching for context (template)",
      "learned_from": [],
      "created_at": "2025-10-24T00:00:00Z"
    },
    {
      "id": "universal-pattern-007",
      "type": "helpful",
      "marker": "✓",
      "title": "Signal Logging for Debugging",
      "helpful_count": 0,
      "harmful_count": 0,
      "context": "All orchestration sessions",
      "strategy": "Log SESSION_START, PLAYBOOK_LOADED, SPECIALIST_DISPATCHED events to signal-log.jsonl",
      "evidence": "Complete audit trail enables debugging failed sessions, pattern analysis (template)",
      "learned_from": [],
      "created_at": "2025-10-24T00:00:00Z"
    },
    {
      "id": "universal-pattern-008",
      "type": "helpful",
      "marker": "✓",
      "title": "Cost Tracking Identifies Expensive Specialists",
      "helpful_count": 0,
      "harmful_count": 0,
      "context": "All orchestration sessions",
      "strategy": "Track tokens and cost per specialist in costs.json",
      "evidence": "Identifies inefficient specialists consuming excess tokens, enables optimization (template)",
      "learned_from": [],
      "created_at": "2025-10-24T00:00:00Z"
    },
    {
      "id": "universal-pattern-009",
      "type": "helpful",
      "marker": "✓",
      "title": "Test-Engineer for Critical Functionality",
      "helpful_count": 0,
      "harmful_count": 0,
      "context": "Projects with authentication, payments, data integrity requirements",
      "strategy": "Include test-engineer to create comprehensive test suites for critical paths",
      "evidence": "Prevents production bugs in high-risk areas, ensures regression coverage (template)",
      "learned_from": [],
      "created_at": "2025-10-24T00:00:00Z"
    },
    {
      "id": "universal-pattern-010",
      "type": "helpful",
      "marker": "✓",
      "title": "SELF_AUDIT_PROTOCOL Before Claiming Complete",
      "helpful_count": 0,
      "harmful_count": 0,
      "context": "All major implementations (3+ agents, deprecations, system changes)",
      "strategy": "Run SELF_AUDIT_PROTOCOL.md 7-phase audit before marking work complete",
      "evidence": "Catches systemic failures, prevents doc drift, ensures integration correctness (template)",
      "learned_from": [],
      "created_at": "2025-10-24T00:00:00Z"
    },
    {
      "id": "universal-pattern-011",
      "type": "helpful",
      "marker": "✓",
      "title": "Plan-Synthesis for Interface Validation",
      "helpful_count": 0,
      "harmful_count": 0,
      "context": "Multi-specialist tasks with interface dependencies (frontend + backend)",
      "strategy": "Use plan-synthesis-agent to validate API contracts before implementation",
      "evidence": "Resolves PLAN_UNCERTAINTY tags, prevents integration failures (template)",
      "learned_from": [],
      "created_at": "2025-10-24T00:00:00Z"
    },
    {
      "id": "universal-antipattern-001",
      "type": "harmful",
      "marker": "✗",
      "title": "Skipping Verification Leads to False Completions",
      "helpful_count": 0,
      "harmful_count": 0,
      "context": "All projects",
      "strategy": "AVOID claiming work complete without verification-agent checking with grep/ls/bash",
      "evidence": "80% of false completions come from skipping verification step (template)",
      "learned_from": [],
      "created_at": "2025-10-24T00:00:00Z"
    },
    {
      "id": "universal-antipattern-002",
      "type": "harmful",
      "marker": "✗",
      "title": "Serial Dispatch Wastes Time",
      "helpful_count": 0,
      "harmful_count": 0,
      "context": "Independent tasks (separate UI components, parallel platform development)",
      "strategy": "AVOID dispatching specialists one-by-one when tasks have no dependencies",
      "evidence": "Serial dispatch takes 2x longer than parallel for independent work (template)",
      "learned_from": [],
      "created_at": "2025-10-24T00:00:00Z"
    },
    {
      "id": "universal-antipattern-003",
      "type": "harmful",
      "marker": "✗",
      "title": "Omitting Requirement-Analyst Causes Scope Drift",
      "helpful_count": 0,
      "harmful_count": 0,
      "context": "Ambiguous user requests",
      "strategy": "AVOID jumping straight to implementation without clarifying requirements",
      "evidence": "60% of rework stems from unclear requirements captured upfront (template)",
      "learned_from": [],
      "created_at": "2025-10-24T00:00:00Z"
    },
    {
      "id": "universal-antipattern-004",
      "type": "harmful",
      "marker": "✗",
      "title": "Skipping Design Review for Internal Tools",
      "helpful_count": 0,
      "harmful_count": 0,
      "context": "Internal dashboards and admin UIs",
      "strategy": "AVOID omitting design-reviewer for 'internal only' UIs",
      "evidence": "Internal tools used daily, poor UX compounds productivity loss (template)",
      "learned_from": [],
      "created_at": "2025-10-24T00:00:00Z"
    },
    {
      "id": "universal-neutral-001",
      "type": "neutral",
      "marker": "○",
      "title": "Specialist vs Monolithic Trade-off",
      "helpful_count": 0,
      "harmful_count": 0,
      "context": "Simple single-file tasks",
      "strategy": "For trivial tasks (<30 lines, 1 file), direct implementation may be faster than orchestration overhead",
      "evidence": "Orchestration adds 2-3 minutes setup; beneficial when task complexity justifies it (template)",
      "learned_from": [],
      "created_at": "2025-10-24T00:00:00Z"
    }
  ]
}
