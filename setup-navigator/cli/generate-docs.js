#!/usr/bin/env node

/**
 * Setup Navigator - Documentation Generator
 *
 * Generates comprehensive setup documentation from registry
 * Usage: node cli/generate-docs.js [--registry <path>] [--output <path>]
 */

const fs = require('fs').promises;
const path = require('path');

async function main() {
  const args = process.argv.slice(2);

  const registryFlag = args.indexOf('--registry');
  const registryPath = registryFlag >= 0 && args[registryFlag + 1]
    ? args[registryFlag + 1]
    : path.join(__dirname, '../output/registry.json');

  const outputFlag = args.indexOf('--output');
  const outputPath = outputFlag >= 0 && args[outputFlag + 1]
    ? args[outputFlag + 1]
    : path.join(__dirname, '../output/SETUP-DOCUMENTATION.md');

  console.log('📄 Setup Navigator - Generating Documentation\n');

  try {
    // Load registry
    const registryData = await fs.readFile(registryPath, 'utf-8');
    const registry = JSON.parse(registryData);

    // Generate documentation
    const documentation = generateDocumentation(registry);

    // Save documentation
    await fs.writeFile(outputPath, documentation, 'utf-8');

    console.log(`✅ Documentation generated successfully!`);
    console.log(`   Output: ${outputPath}\n`);
    console.log(`📊 Stats:`);
    console.log(`   - ${registry.agents.length} agents documented`);
    console.log(`   - ${registry.skills.length} skills documented`);
    console.log(`   - ${registry.commands.length} commands documented`);
    console.log(`   - ${Object.values(registry.plugins).filter(Boolean).length} plugins listed\n`);

  } catch (error) {
    console.error('\n❌ Error:', error.message);
    console.error(error.stack);
    process.exit(1);
  }
}

function generateDocumentation(registry) {
  const date = new Date().toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  });

  return `# Claude Code Setup Documentation

**Generated:** ${date}
**Total Agents:** ${registry.agents.length}
**Total Skills:** ${registry.skills.length}
**Total Commands:** ${registry.commands.length}
**Enabled Plugins:** ${Object.values(registry.plugins).filter(Boolean).length}

---

## 📋 TABLE OF CONTENTS

1. [Global Agents](#global-agents)
2. [Model Strategy](#model-strategy)
3. [Agent Capability Matrix](#agent-capability-matrix)
4. [Skills Inventory](#skills-inventory)
5. [Slash Commands](#slash-commands)
6. [Enabled Plugins](#enabled-plugins)
7. [Quick Reference](#quick-reference)

---

## 🤖 GLOBAL AGENTS

### Agent Overview

${generateAgentTable(registry.agents)}

### Agents by Category

${generateAgentsByCategory(registry.agents)}

### Agent Details

${generateAgentDetails(registry.agents)}

---

## 🎯 MODEL STRATEGY

### Model Distribution

${generateModelDistribution(registry.agents)}

### Cost Optimization

Based on your current setup:

${generateCostAnalysis(registry.agents)}

**Recommended Strategy:**
- **Opus agents** (${countAgentsByModel(registry.agents, 'opus')} total): Use for architecture, complex design decisions
- **Sonnet agents** (${countAgentsByModel(registry.agents, 'sonnet')} total): Use for implementation, iteration, most tasks
- **Haiku agents** (${countAgentsByModel(registry.agents, 'haiku')} total): Use for quick, simple tasks

---

## 📊 AGENT CAPABILITY MATRIX

### iOS Development

${generateIOSMatrix(registry.agents)}

### Design & UX

${generateDesignMatrix(registry.agents)}

### Development & Engineering

${generateDevelopmentMatrix(registry.agents)}

---

## 🎨 SKILLS INVENTORY

Total Skills: ${registry.skills.length}

${generateSkillsList(registry.skills)}

### Skills by Category

${generateSkillsByCategory(registry.skills)}

---

## ⚡ SLASH COMMANDS

${generateCommandsList(registry.commands)}

---

## 🔌 ENABLED PLUGINS

${generatePluginsList(registry.plugins)}

---

## 🔑 QUICK REFERENCE

### When to Use Which Agent

${generateQuickReference(registry.agents)}

### Common Workflows

${generateCommonWorkflows(registry.agents, registry.skills)}

---

## 📁 SETUP LOCATION

Your global Claude Code setup is located at: \`~/.claude/\`

\`\`\`
~/.claude/
├── agents/          # ${registry.agents.length} agents
├── skills/          # ${registry.skills.length} skills
├── commands/        # ${registry.commands.length} commands
├── settings.json    # Configuration
└── scripts/         # Custom scripts
\`\`\`

---

**Generated by Setup Navigator** | [View Registry](./registry.json)
`;
}

function generateAgentTable(agents) {
  const rows = agents.map(agent => {
    const size = (agent.size / 1024).toFixed(1);
    return `| **${agent.name}** | ${agent.model} | ${size} KB | ${agent.category} |`;
  });

  return `| Agent | Model | Size | Category |
|-------|-------|------|----------|
${rows.join('\n')}`;
}

function generateAgentsByCategory(agents) {
  const byCategory = {};

  agents.forEach(agent => {
    if (!byCategory[agent.category]) {
      byCategory[agent.category] = [];
    }
    byCategory[agent.category].push(agent);
  });

  const sections = [];

  for (const [category, agentList] of Object.entries(byCategory).sort()) {
    const agentNames = agentList.map(a => `- **${a.name}** (${a.model})`).join('\n');
    sections.push(`#### ${category.toUpperCase()} (${agentList.length} agents)\n\n${agentNames}`);
  }

  return sections.join('\n\n');
}

function generateAgentDetails(agents) {
  return agents.slice(0, 10).map(agent => {
    const capabilities = agent.capabilities.length > 0
      ? `\n**Capabilities:**\n${agent.capabilities.slice(0, 5).map(c => `- ${c}`).join('\n')}`
      : '';

    return `### ${agent.name}

**Model:** ${agent.model.toUpperCase()}
**Category:** ${agent.category}
**Size:** ${(agent.size / 1024).toFixed(1)} KB

${agent.description}${capabilities}

**Tools:** ${Array.isArray(agent.tools) ? agent.tools.join(', ') : agent.tools}
`;
  }).join('\n---\n\n');
}

function generateModelDistribution(agents) {
  const counts = {};
  agents.forEach(agent => {
    counts[agent.model] = (counts[agent.model] || 0) + 1;
  });

  const total = agents.length;
  const rows = Object.entries(counts)
    .sort()
    .map(([model, count]) => {
      const percentage = ((count / total) * 100).toFixed(1);
      return `| **${model.toUpperCase()}** | ${count} | ${percentage}% |`;
    });

  return `| Model | Agents | Percentage |
|-------|--------|------------|
${rows.join('\n')}`;
}

function generateCostAnalysis(agents) {
  const opusCount = countAgentsByModel(agents, 'opus');
  const sonnetCount = countAgentsByModel(agents, 'sonnet');
  const haikuCount = countAgentsByModel(agents, 'haiku');

  const opusPercentage = ((opusCount / agents.length) * 100).toFixed(1);
  const sonnetPercentage = ((sonnetCount / agents.length) * 100).toFixed(1);

  return `- **Opus usage:** ${opusPercentage}% (${opusCount} agents) @ $15/$75 per million tokens
- **Sonnet usage:** ${sonnetPercentage}% (${sonnetCount} agents) @ $3/$15 per million tokens
- **Estimated monthly cost:** $50-150 for heavy usage (assuming 98% Sonnet, 2% Opus)`;
}

function generateIOSMatrix(agents) {
  const iosAgents = agents.filter(a =>
    a.category === 'ios-development' ||
    a.name.toLowerCase().includes('ios') ||
    a.name.toLowerCase().includes('swift')
  );

  if (iosAgents.length === 0) {
    return '*No iOS-specific agents found*';
  }

  return iosAgents.map(agent =>
    `- **${agent.name}** (${agent.model}): ${agent.description.substring(0, 150)}...`
  ).join('\n');
}

function generateDesignMatrix(agents) {
  const designAgents = agents.filter(a =>
    a.category === 'design' ||
    a.name.toLowerCase().includes('design') ||
    a.name.toLowerCase().includes('ui') ||
    a.name.toLowerCase().includes('ux')
  );

  if (designAgents.length === 0) {
    return '*No design-specific agents found*';
  }

  return designAgents.map(agent =>
    `- **${agent.name}** (${agent.model}): ${agent.description.substring(0, 150)}...`
  ).join('\n');
}

function generateDevelopmentMatrix(agents) {
  const devAgents = agents.filter(a =>
    a.category === 'frontend' ||
    a.category === 'backend' ||
    a.name.toLowerCase().includes('developer') ||
    a.name.toLowerCase().includes('javascript') ||
    a.name.toLowerCase().includes('react') ||
    a.name.toLowerCase().includes('nextjs')
  );

  if (devAgents.length === 0) {
    return '*No development-specific agents found*';
  }

  return devAgents.map(agent =>
    `- **${agent.name}** (${agent.model}): ${agent.description.substring(0, 100)}...`
  ).join('\n');
}

function generateSkillsList(skills) {
  return skills.map(skill =>
    `### ${skill.name}\n\n${skill.description}\n\n**Category:** ${skill.category}  \n**Files:** ${skill.files.length}`
  ).join('\n\n');
}

function generateSkillsByCategory(skills) {
  const byCategory = {};

  skills.forEach(skill => {
    if (!byCategory[skill.category]) {
      byCategory[skill.category] = [];
    }
    byCategory[skill.category].push(skill);
  });

  const sections = [];

  for (const [category, skillList] of Object.entries(byCategory).sort()) {
    const skillNames = skillList.map(s => `- **${s.name}**`).join('\n');
    sections.push(`#### ${category.toUpperCase()}\n\n${skillNames}`);
  }

  return sections.join('\n\n');
}

function generateCommandsList(commands) {
  if (commands.length === 0) {
    return '*No slash commands found*';
  }

  return commands.map(cmd =>
    `### \`/${cmd.name}\`\n\n${cmd.description}\n\n**Allowed Tools:** ${cmd.allowedTools.join(', ') || 'All'}`
  ).join('\n\n');
}

function generatePluginsList(plugins) {
  const enabled = Object.entries(plugins)
    .filter(([_, isEnabled]) => isEnabled)
    .map(([name, _]) => name)
    .sort();

  if (enabled.length === 0) {
    return '*No plugins enabled*';
  }

  return enabled.map(plugin => `- ✅ **${plugin}**`).join('\n');
}

function generateQuickReference(agents) {
  const categories = [
    { name: 'iOS Development', keywords: ['ios', 'swift'] },
    { name: 'Design & UX', keywords: ['design', 'ui', 'ux'] },
    { name: 'Frontend Development', keywords: ['frontend', 'react', 'nextjs'] },
    { name: 'Backend Development', keywords: ['backend'] },
    { name: 'Content Creation', keywords: ['content', 'seo'] },
    { name: 'Orchestration', keywords: ['orchestr', 'agent-organizer'] }
  ];

  return categories.map(cat => {
    const matching = agents.filter(a =>
      cat.keywords.some(keyword =>
        a.name.toLowerCase().includes(keyword) ||
        a.description.toLowerCase().includes(keyword)
      )
    );

    if (matching.length === 0) return '';

    const agentNames = matching.map(a => `\`${a.name}\``).join(', ');
    return `**${cat.name}:** ${agentNames}`;
  }).filter(Boolean).join('\n\n');
}

function generateCommonWorkflows(agents, skills) {
  return `### iOS App Development Workflow

1. **Architecture:** Use \`swift-architect\` (Opus) for system design decisions
2. **Implementation:** Use \`ios-dev\` (Sonnet) for feature development
3. **Optimization:** Use \`swiftui-specialist\` (Sonnet) for UI optimization

### Design → Code Pipeline

1. **Sketch:** Use Fluxwing skills for ASCII mockups
2. **Refine:** Use \`design-master\` (Sonnet) for pixel-perfect design
3. **Implement:** Use appropriate dev agent based on stack

### Full Production Workflow

1. **Requirements:** Use \`/agent-workflow\` command
2. **Specs → Architecture → Implementation → Tests**
3. **Quality gate validation (95% threshold)**`;
}

function countAgentsByModel(agents, model) {
  return agents.filter(a => a.model === model).length;
}

main();
