#!/bin/bash
#
# Pre-commit Hook: Design System Enforcement
#
# This hook prevents committing code with design system violations
#
# Installation:
#   1. Copy to .husky/pre-commit (if using Husky)
#   2. OR copy to .git/hooks/pre-commit
#   3. chmod +x .husky/pre-commit
#
# What it does:
#   1. Runs verification script (static analysis)
#   2. Runs ESLint (prevents hardcoded colors in JSX/TSX)
#   3. Runs Stylelint (prevents hardcoded colors in CSS)
#   4. Blocks commit if any violations found
#

set -e  # Exit on first error

echo "üîç Running design system verification..."
echo ""

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Track overall status
VIOLATIONS=0

# ============================================================================
# STEP 1: Run Verification Script (Static Analysis)
# ============================================================================

echo "üìã Step 1/3: Static Analysis (verify-design-system.sh)"
echo "------------------------------------------------------------"

# Determine project and run appropriate verification script
if [ -f "verify-design-system.sh" ]; then
  VERIFY_SCRIPT="./verify-design-system.sh"
elif [ -f "../obdn-design-automation/projects/obdn/verify-design-system.sh" ]; then
  VERIFY_SCRIPT="~/claude-vibe-code/obdn-design-automation/projects/obdn/verify-design-system.sh"
else
  echo "${YELLOW}‚ö†Ô∏è  Warning: Verification script not found${NC}"
  echo "Skipping static analysis..."
  echo ""
fi

if [ -n "$VERIFY_SCRIPT" ]; then
  if $VERIFY_SCRIPT . > /tmp/verify-output.txt 2>&1; then
    echo "${GREEN}‚úÖ Static analysis passed${NC}"
  else
    echo "${RED}‚ùå Static analysis failed${NC}"
    cat /tmp/verify-output.txt
    VIOLATIONS=$((VIOLATIONS + 1))
  fi
  echo ""
fi

# ============================================================================
# STEP 2: Run ESLint (JSX/TSX hardcoded colors)
# ============================================================================

echo "üìã Step 2/3: ESLint (hardcoded colors in JSX/TSX)"
echo "------------------------------------------------------------"

if [ -f "node_modules/.bin/eslint" ] && [ -f ".eslintrc.js" ]; then
  # Get list of staged files
  STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.(jsx?|tsx?)$' || true)

  if [ -n "$STAGED_FILES" ]; then
    if npm run lint --silent -- $STAGED_FILES; then
      echo "${GREEN}‚úÖ ESLint passed${NC}"
    else
      echo "${RED}‚ùå ESLint violations found${NC}"
      VIOLATIONS=$((VIOLATIONS + 1))
    fi
  else
    echo "${YELLOW}‚ö†Ô∏è  No JS/TS files staged${NC}"
  fi
else
  echo "${YELLOW}‚ö†Ô∏è  ESLint not configured${NC}"
  echo "Skipping ESLint check..."
fi
echo ""

# ============================================================================
# STEP 3: Run Stylelint (CSS hardcoded colors)
# ============================================================================

echo "üìã Step 3/3: Stylelint (hardcoded colors in CSS)"
echo "------------------------------------------------------------"

if [ -f "node_modules/.bin/stylelint" ] && [ -f ".stylelintrc.json" ]; then
  # Get list of staged CSS files
  STAGED_CSS=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.(css|scss|module\.css)$' || true)

  if [ -n "$STAGED_CSS" ]; then
    if npm run stylelint --silent -- $STAGED_CSS; then
      echo "${GREEN}‚úÖ Stylelint passed${NC}"
    else
      echo "${RED}‚ùå Stylelint violations found${NC}"
      VIOLATIONS=$((VIOLATIONS + 1))
    fi
  else
    echo "${YELLOW}‚ö†Ô∏è  No CSS files staged${NC}"
  fi
else
  echo "${YELLOW}‚ö†Ô∏è  Stylelint not configured${NC}"
  echo "Skipping Stylelint check..."
fi
echo ""

# ============================================================================
# FINAL RESULT
# ============================================================================

echo "============================================================"
if [ $VIOLATIONS -eq 0 ]; then
  echo "${GREEN}‚úÖ All checks passed! Proceeding with commit...${NC}"
  echo ""
  exit 0
else
  echo "${RED}‚ùå $VIOLATIONS check(s) failed${NC}"
  echo ""
  echo "To fix:"
  echo "  1. Review violations above"
  echo "  2. Fix hardcoded colors ‚Üí use CSS variables"
  echo "  3. Run verification: ./verify-design-system.sh ."
  echo "  4. Try commit again"
  echo ""
  echo "To bypass (NOT RECOMMENDED):"
  echo "  git commit --no-verify"
  echo ""
  exit 1
fi
