"""Integration tests for semantic URI template includes.

This test suite validates the complete workflow of using artifact-template:// URIs
in Jinja2 templates with real Jinja2 Environment and actual template rendering.
Tests use real FileSystem operations with temporary directories.
"""

from __future__ import annotations

from pathlib import Path

from jinja2 import ChoiceLoader, Environment, FileSystemLoader
import pytest

from pantheon.artifact_engine import ArtifactEngine, SemanticUriLoader
from pantheon.filesystem import FileSystem
from pantheon.workspace import PantheonWorkspace, ProjectConfig


class TestSemanticUriTemplateIntegration:
    """Integration tests for artifact-template:// includes in Jinja2 templates."""

    @pytest.fixture
    def temp_team_package(self, tmp_path: Path) -> Path:
        """Create temporary team package structure with section templates.

        Args:
            tmp_path: Pytest temporary directory fixture

        Returns:
            Path to team package root directory
        """
        # Create team package structure
        team_root = tmp_path / "pantheon-teams" / "test-team"
        team_root.mkdir(parents=True)

        # Create UPDATE process with section templates
        update_process = team_root / "processes" / "update-guide"
        sections_dir = update_process / "artifact" / "sections"
        sections_dir.mkdir(parents=True)

        # Create section template files
        (sections_dir / "core-principles.md").write_text(
            "# Core Principles\n\nGlass Box Philosophy: Transparency over opacity"
        )
        (sections_dir / "overview.md").write_text(
            "# Overview\n\nThe Pantheon Framework implements RAE patterns"
        )
        (sections_dir / "components.md").write_text(
            "# Components\n\nWorkspace, Artifact Engine, Process Handler"
        )

        return team_root

    @pytest.fixture
    def workspace_with_real_filesystem(
        self, tmp_path: Path, temp_team_package: Path
    ) -> PantheonWorkspace:
        """Create PantheonWorkspace with real FileSystem and team package.

        Args:
            tmp_path: Pytest temporary directory
            temp_team_package: Created team package structure

        Returns:
            Configured PantheonWorkspace with real I/O
        """
        filesystem = FileSystem()
        workspace = PantheonWorkspace(
            project_root=str(tmp_path),
            artifacts_root=str(tmp_path / "pantheon-artifacts"),
            filesystem=filesystem,
        )

        # Configure active team
        workspace._project_config = ProjectConfig(
            active_team="test-team", artifacts_root="pantheon-artifacts"
        )

        return workspace

    def test_jinja2_environment_includes_section_via_semantic_uri(
        self,
        workspace_with_real_filesystem: PantheonWorkspace,
    ) -> None:
        """Test Jinja2 environment successfully includes templates via artifact-template://.

        Validates complete workflow: semantic URI resolution -> file reading ->
        template rendering with includes from UPDATE process sections.
        """
        # Arrange: Create Jinja2 environment with SemanticUriLoader
        semantic_loader = SemanticUriLoader(workspace_with_real_filesystem)
        env = Environment(loader=semantic_loader)

        # Act: Render template containing semantic URI include
        template_source = """# Architecture Guide

{% include 'artifact-template://update-guide/sections/core-principles' %}

{% include 'artifact-template://update-guide/sections/overview' %}
"""
        template = env.from_string(template_source)
        result = template.render()

        # Assert: Verify included content appears in output
        assert "# Core Principles" in result
        assert "Glass Box Philosophy" in result
        assert "# Overview" in result
        assert "The Pantheon Framework" in result

    def test_choice_loader_combines_semantic_uri_and_file_system_loaders(
        self,
        workspace_with_real_filesystem: PantheonWorkspace,
        tmp_path: Path,
    ) -> None:
        """Test ChoiceLoader enables both semantic URIs and file paths.

        Validates that templates can include both artifact-template:// URIs
        and regular file paths, with correct loader priority.
        """
        # Arrange: Create regular template file
        templates_dir = tmp_path / "templates"
        templates_dir.mkdir()
        (templates_dir / "footer.md").write_text("\n---\n\nGenerated by Pantheon")

        # Create environment with ChoiceLoader
        semantic_loader = SemanticUriLoader(workspace_with_real_filesystem)
        file_loader = FileSystemLoader(str(templates_dir))
        choice_loader = ChoiceLoader([semantic_loader, file_loader])
        env = Environment(loader=choice_loader)

        # Act: Render template with both include types
        template_source = """# Document

{% include 'artifact-template://update-guide/sections/components' %}

{% include 'footer.md' %}
"""
        template = env.from_string(template_source)
        result = template.render()

        # Assert: Verify both includes resolved correctly
        assert "# Components" in result
        assert "Workspace, Artifact Engine" in result
        assert "Generated by Pantheon" in result

    def test_artifact_engine_creates_environment_with_semantic_loader(
        self,
        workspace_with_real_filesystem: PantheonWorkspace,
    ) -> None:
        """Test ArtifactEngine.create_artifact_jinja_environment() integration.

        Validates that ArtifactEngine correctly creates Jinja2 environment
        with SemanticUriLoader and FileSystemLoader in ChoiceLoader.
        """
        # Arrange: Create artifact engine
        artifact_engine = ArtifactEngine(workspace_with_real_filesystem)

        # Act: Create Jinja2 environment via artifact engine method
        env = artifact_engine.create_artifact_jinja_environment(
            workspace_with_real_filesystem
        )

        # Assert: Verify environment configured correctly
        assert isinstance(env.loader, ChoiceLoader)

        # Test rendering with semantic URI include
        template_source = (
            """{% include 'artifact-template://update-guide/sections/overview' %}"""
        )
        template = env.from_string(template_source)
        result = template.render()

        assert "# Overview" in result
        assert "The Pantheon Framework" in result

    def test_multiple_nested_includes_via_semantic_uris(
        self,
        workspace_with_real_filesystem: PantheonWorkspace,
    ) -> None:
        """Test template with multiple semantic URI includes works correctly.

        Validates that templates can include multiple sections from the same
        or different UPDATE processes using artifact-template:// URIs.
        """
        # Arrange: Create environment
        semantic_loader = SemanticUriLoader(workspace_with_real_filesystem)
        env = Environment(loader=semantic_loader)

        # Act: Render template with multiple includes
        template_source = """# Complete Architecture Guide

{% include 'artifact-template://update-guide/sections/overview' %}

{% include 'artifact-template://update-guide/sections/core-principles' %}

{% include 'artifact-template://update-guide/sections/components' %}
"""
        template = env.from_string(template_source)
        result = template.render()

        # Assert: Verify all sections included in order
        overview_pos = result.find("# Overview")
        principles_pos = result.find("# Core Principles")
        components_pos = result.find("# Components")

        assert overview_pos > 0
        assert principles_pos > overview_pos
        assert components_pos > principles_pos
        assert "Glass Box Philosophy" in result
        assert "Workspace, Artifact Engine" in result

    def test_error_handling_for_missing_section_template(
        self,
        workspace_with_real_filesystem: PantheonWorkspace,
    ) -> None:
        """Test clear error when semantic URI points to missing section.

        Validates that missing section templates result in appropriate
        TemplateNotFound error with helpful context.
        """
        from jinja2 import TemplateNotFound

        # Arrange: Create environment
        semantic_loader = SemanticUriLoader(workspace_with_real_filesystem)
        env = Environment(loader=semantic_loader)

        # Act & Assert: Verify TemplateNotFound for missing section
        template_source = (
            "{% include 'artifact-template://update-guide/sections/nonexistent' %}"
        )
        template = env.from_string(template_source)

        with pytest.raises(TemplateNotFound):
            template.render()

    def test_semantic_uri_with_variables_in_template(
        self,
        workspace_with_real_filesystem: PantheonWorkspace,
    ) -> None:
        """Test semantic URI includes work alongside template variables.

        Validates that included sections can reference variables from
        parent template rendering context.
        """
        # Arrange: Create section template with variable
        team_root = (
            Path(workspace_with_real_filesystem._project_root)
            / "pantheon-teams"
            / "test-team"
        )
        sections_dir = (
            team_root / "processes" / "update-guide" / "artifact" / "sections"
        )
        (sections_dir / "greeting.md").write_text("Hello, {{ user_name }}!")

        # Create environment
        semantic_loader = SemanticUriLoader(workspace_with_real_filesystem)
        env = Environment(loader=semantic_loader)

        # Act: Render with variable context
        template_source = (
            "{% include 'artifact-template://update-guide/sections/greeting' %}"
        )
        template = env.from_string(template_source)
        result = template.render(user_name="Framework Engineer")

        # Assert: Verify variable substitution in included template
        assert "Hello, Framework Engineer!" in result
